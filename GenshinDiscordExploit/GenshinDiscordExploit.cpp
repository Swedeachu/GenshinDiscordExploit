#include <windows.h> // Include the Windows header file necessary for native Windows applications
#include <string>

#include <windows.h>

// Function declaration for the Window Procedure
LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);

int main()
{
  // Retrieve the handle to the executable instance
  HINSTANCE hInstance = GetModuleHandle(nullptr);

  // The class name to be associated with the window
  std::wstring CLASS_NAME = L"Genshin Impact";

  // Structure to hold the window class properties
  WNDCLASS wc = {};
  wc.lpfnWndProc = WindowProc;      // Pointer to the window procedure
  wc.hInstance = hInstance;         // Handle to the instance that contains the window procedure
  wc.lpszClassName = CLASS_NAME.c_str();    // Name of the window class

  // Register the window class
  RegisterClass(&wc);

  // Create the window
  HWND hwnd = CreateWindowEx(
    0,                          // Optional window styles
    CLASS_NAME.c_str(),                 // Window class
    CLASS_NAME.c_str(),                // Window text (title)
    WS_OVERLAPPEDWINDOW,        // Window style

    // Size and position
    CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT,

    NULL,       // Parent window    
    NULL,       // Menu
    hInstance,  // Instance handle
    NULL        // Additional application data
  );

  if (hwnd == NULL) // Check if window creation was successful
  {
    return 0;
  }

  ShowWindow(hwnd, SW_SHOWDEFAULT); // Show the window

  // Run the message loop
  MSG msg = {};
  while (GetMessage(&msg, NULL, 0, 0))
  {
    TranslateMessage(&msg);  // Translates virtual-key messages into character messages
    DispatchMessage(&msg);   // Sends message to WindowProc
  }

  return static_cast<int>(msg.wParam);
}

// Window procedure to handle messages
LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
  switch (uMsg)
  {
    case WM_DESTROY:
      PostQuitMessage(0); // Post a quit message and return
      return 0;
  }

  return DefWindowProc(hwnd, uMsg, wParam, lParam); // Default handling for any messages not handled above
}
